#!/bin/sh

set -e

# identify format variables https://imagemagick.org/script/escape.php

echo "[INFO] CSS Sprites Generator"

# count and log source images

echo "[INFO] Source images: $IMAGES_PATH_PATTERN"

TOTAL_SOURCE_IMAGES=0
TOTAL_SOURCE_IMAGES_SIZE=0
LOG_AND_COUNT_SOURCE_IMAGES_TEMPLATE=$(identify -format "echo \"[INFO] %f %w x %h pixels %B bytes\"\nTOTAL_SOURCE_IMAGES_SIZE=\$((\$TOTAL_SOURCE_IMAGES_SIZE + %B))\nTOTAL_SOURCE_IMAGES=\$((\$TOTAL_SOURCE_IMAGES + 1))\n\n" $IMAGES_PATH_PATTERN)

if [ "$DEBUG_ENABLED" = "true" ]; then
    printf "[DEBUG] Count source images ----------------------------------------------------------------------------------\n\n$LOG_AND_COUNT_SOURCE_IMAGES_TEMPLATE\n\n[DEBUG] Count source images\n\n"
fi

eval "$LOG_AND_COUNT_SOURCE_IMAGES_TEMPLATE"
echo "[INFO] Total source images: $TOTAL_SOURCE_IMAGES ($TOTAL_SOURCE_IMAGES_SIZE bytes)"

# generate styles

echo "[INFO] Generating CSS styles..."

HEIGTH_OFFSET=0

STYLE_TEMPLATE=".$SPRITES_CLASS_PREFIX%t { background-position: 0 -\${HEIGTH_OFFSET}px; width: %wpx; height: %hpx; }"

INCREMENT_HEIGTH_OFFSET_TEMPLATE="\$((\$HEIGTH_OFFSET + %h))"

FINAL_STYLE_TEMPLATE="$(identify -format "echo \"$STYLE_TEMPLATE\"\nHEIGTH_OFFSET=${INCREMENT_HEIGTH_OFFSET_TEMPLATE}\n\n" $IMAGES_PATH_PATTERN)"

if [ "$DEBUG_ENABLED" = "true" ]; then
    printf "[DEBUG] Style template ---------------------------------------------------------------------------------------\n\n$FINAL_STYLE_TEMPLATE\n\n[DEBUG] Style template\n\n"
fi

rm -rf build/*

echo ".$SPRITES_BASE_CLASS { background: url('$IMAGE_SPRITES_BASE_URL$IMAGE_SPRITES_FILENAME') no-repeat; }" > build/$STYLE_FILENAME
eval "$FINAL_STYLE_TEMPLATE" >> build/$STYLE_FILENAME

# generate sprite image

echo "[INFO] Generating image sprites, using $IMAGE_FORMAT format..."

convert $IMAGES_PATH_PATTERN -append $IMAGE_FORMAT:build/$IMAGE_SPRITES_FILENAME

# optimize image sprites

if [ "$OPTIMIZE_IMAGE_SPRITES" = "true" ]; then

    echo "[INFO] Optimizing image sprites..."

    VERBOSE=$([ "$DEBUG_ENABLED" == "true" ] && echo "-v" || echo "-s")

    echo "[INFO] Sending $IMAGE_SPRITES_FILENAME to $TINIFY_API_SHRINK_URL to optimize it..."

    curl $VERBOSE \
        --user $TINIFY_API_KEY \
        --data-binary @build/$IMAGE_SPRITES_FILENAME \
        --output build/$TINIFY_JSON_RESPONSE_FILE \
        $TINIFY_API_SHRINK_URL

    OPTIMIZED_IMAGE_URL="$(grep -oP '(?<="url":")[^"]*' build/$TINIFY_JSON_RESPONSE_FILE)" > /dev/null

    NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME="not-optimized-$IMAGE_SPRITES_FILENAME"
    echo "[INFO] Rename $IMAGE_SPRITES_FILENAME file to $NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME"

    mv build/$IMAGE_SPRITES_FILENAME build/$NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME

    echo "[INFO] Downloading optimized image sprites $OPTIMIZED_IMAGE_URL..."

    curl $VERBOSE \
        --user $TINIFY_API_KEY \
        --output build/$IMAGE_SPRITES_FILENAME \
        $OPTIMIZED_IMAGE_URL > /dev/null

else
    NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME="$IMAGE_SPRITES_FILENAME"
fi

# generate example page

echo "[INFO] Generating example HTML page..."

printf "
<!DOCTYPE html>
<html>
    <body>
        $(identify -format "<div class=\"$SPRITES_BASE_CLASS $SPRITES_CLASS_PREFIX%t\"></div>\n        " $IMAGES_PATH_PATTERN)

        <style>
            /* only for example */
            body {
                display: flex;
                flex-wrap: wrap;
                max-width: 1280px;
                margin: 50px auto;
                justify-content: center;
            }

            body > div {
                margin: 5px;
                border: solid 4px;
            }
        </style>
        <link href=\"$STYLE_FILENAME\" rel=\"stylesheet\" type=\"text/css\">
    </body>
</html>
" > build/$EXAMPLE_FILENAME

NOT_OPTIMIZED_IMAGE_SPRITES_FILE_SIZE=$(identify -format "%B" build/$NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME)
IMAGE_SPRITES_FILE_SIZE=$(identify -format "%B" build/$IMAGE_SPRITES_FILENAME)
SIZE_NOT_OPTIMIZED_REDUCTION_PERCENTAGE=$(echo "scale=$PERCENTAGE_SCALE; (100 - (($NOT_OPTIMIZED_IMAGE_SPRITES_FILE_SIZE * 100) / $TOTAL_SOURCE_IMAGES_SIZE))" | bc)

printf "[INFO] \033[1;32mBUILD SUCCESS\033[0m\n"
echo "[INFO] Build path: $(pwd)/build"
echo "[INFO] CSS Style file: $STYLE_FILENAME $(stat -c%s "build/$STYLE_FILENAME") bytes"
echo "[INFO] Not optimized image sprites: $NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME $(identify -format "%w x %h pixels %B bytes ($SIZE_NOT_OPTIMIZED_REDUCTION_PERCENTAGE% reduction)" build/$NOT_OPTIMIZED_IMAGE_SPRITES_FILENAME)"

if [ "$OPTIMIZE_IMAGE_SPRITES" = "true" ]; then
    SIZE_REDUCTION_PERCENTAGE=$(echo "scale=$PERCENTAGE_SCALE; (100 - (($IMAGE_SPRITES_FILE_SIZE * 100) / $TOTAL_SOURCE_IMAGES_SIZE))" | bc)

    echo "[INFO] Optimized image sprites: $IMAGE_SPRITES_FILENAME $(identify -format "%w x %h pixels %B bytes ($SIZE_REDUCTION_PERCENTAGE% reduction)" build/$IMAGE_SPRITES_FILENAME)"
fi

echo "[INFO] Example HTML page: $EXAMPLE_FILENAME"
